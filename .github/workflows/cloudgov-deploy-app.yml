name: Deploy App

on:
  workflow_call:

jobs:
  updateApp:
    name: Update App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set environment
        run: |
          BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3-)
          COMPOSER_DEV=1
          GSA_AUTH_KEY=${{ secrets.GSA_AUTH_DEVELOPMENT_KEY }}
          case ${BRANCH} in
            develop | *deploydev)
              CF_SPACE="dev"
              DRUPAL_MEMORY=${{ vars.DEVELOP_CMS_MEMORY }}
              DRUPAL_INSTANCES=${{ vars.DEVELOP_INSTANCES }}
              ;;
            main)
              CF_SPACE="prod"
              COMPOSER_DEV=0
              DRUPAL_MEMORY=${{ vars.MAIN_CMS_MEMORY }}
              DRUPAL_INSTANCES=${{ vars.MAIN_INSTANCES }}
              GSA_AUTH_KEY=${{ secrets.GSA_AUTH_PRODUCTION_KEY }}
              ;;
            stage | release/* | hotfix/*)
              CF_SPACE="staging"
              DRUPAL_MEMORY=${{ vars.STAGE_CMS_MEMORY }}
              DRUPAL_INSTANCES=${{ vars.STAGE_INSTANCES }}
              ;;
          esac

          echo "APP_NAME=drupal" | tee -a $GITHUB_ENV
          echo "BRANCH=${BRANCH}" | tee -a $GITHUB_ENV
          echo "BUILDPACK_PORT=${{ vars.BUILDPACK_PORT }}" | tee -a $GITHUB_ENV
          echo "CF_SPACE=${CF_SPACE}" | tee -a $GITHUB_ENV
          echo "COMPOSER_DEV=${COMPOSER_DEV}" | tee -a $GITHUB_ENV
          echo "DRUPAL_INSTANCES=${DRUPAL_INSTANCES}" | tee -a $GITHUB_ENV
          echo "DRUPAL_MEMORY=${DRUPAL_MEMORY}" | tee -a $GITHUB_ENV
          echo "GSA_AUTH_KEY=${GSA_AUTH_KEY}" | tee -a $GITHUB_ENV
          echo "HASH_SALT=${{ secrets.HASH_SALT }}" | tee -a $GITHUB_ENV
          echo "NEWRELIC_KEY=${{ secrets.NEWRELIC_KEY }}" | tee -a $GITHUB_ENV
          echo "WAF_NAME=waf"| tee -a $GITHUB_ENV

          if [ "${COMPOSER_DEV}" = "1" ]; then
            sed -i 's/--no-dev //' .bp-config/options.json || exit 0
          fi

      - name: Set repo name
        run: echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
      - name: Install basic dependancies
        run: ./scripts/pipeline/deb-basic-deps.sh
      - name: Install Cloudfoundry CLI
        run: ./scripts/pipeline/deb-cf-install.sh
      - name: Cloud.gov login
        env:
          CF_USER: "${{ secrets.CF_USER }}"
          CF_PASSWORD: "${{ secrets.CF_PASSWORD }}"
          CF_ORG: "${{ secrets.CF_ORG }}"
          PROJECT: "${{ secrets.PROJECT }}"
        run: |
          source ./scripts/pipeline/cloud-gov-login.sh
          cf target -s "${CF_SPACE}" >/dev/null 2>&1
      - name: Build theme
        run: ./orch/build_node.sh
      - name: Deploy App
        env:
          PROJECT: "${{ secrets.PROJECT }}"
        run: |
          app_guid=$(cf app --guid ${PROJECT}-drupal-${CF_SPACE})
          cf curl -X POST /v3/apps/${app_guid}/actions/clear_buildpack_cache
          source ./scripts/pipeline/cloud-gov-deploy.sh
      - name: Post Deploy
        env:
          PROJECT: "${{ secrets.PROJECT }}"
        run: source ./scripts/pipeline/cloud-gov-post-deploy.sh
      - name: Build Static Site
        env:
          PROJECT: "${{ secrets.PROJECT }}"
        run: |
          if [[ "${CF_SPACE}" = "dev" || "${CF_SPACE}" = "staging" ]]; then
            echo "${CF_SPACE} is building the static site now..."
            APP="${PROJECT}-drupal-${CF_SPACE}"
            TASK_NAME="${APP}-upkeep"

            cf run-task "${APP}" --command "/home/vcap/app/scripts/upkeep" --wait -m 1G -k 4G --name "${TASK_NAME}" &
            RUN_TASK_PID=$!

            cf logs "${APP}" | grep "${TASK_NAME}" &
            sleep 1
            CF_LOGS_PID=$(pgrep -f "cf logs")

            # Wait till the task is complete.
            wait "${RUN_TASK_PID}"

            # Now stop cf logs from running.
            kill "${CF_LOGS_PID}"

          else
            echo "${CF_SPACE} does not need to build static site on deployment"
          fi
